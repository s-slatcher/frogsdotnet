[gd_scene load_steps=17 format=3 uid="uid://0u10cgpxhlft"]

[ext_resource type="Script" uid="uid://jjhedjijysii" path="res://map_generation/World.cs" id="1_vdpkr"]
[ext_resource type="Material" uid="uid://b8kwrx0bwxsks" path="res://resources/DirtWithGrassMaterial.tres" id="2_qhmyd"]
[ext_resource type="PackedScene" uid="uid://cggqb75a8w8r" path="res://addons/debug_menu/debug_menu.tscn" id="3_ggvqs"]
[ext_resource type="PackedScene" uid="uid://i888mvag6wjg" path="res://common/InputCapture/PlaneMouseCapture.tscn" id="4_bk67d"]
[ext_resource type="PackedScene" uid="uid://esxnxo61jdal" path="res://common/InputCapture/line_drawing.tscn" id="5_cfn36"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_qhmyd"]
sky_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)
ground_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)

[sub_resource type="Sky" id="Sky_ggvqs"]
sky_material = SubResource("ProceduralSkyMaterial_qhmyd")

[sub_resource type="Environment" id="Environment_bk67d"]
background_mode = 2
sky = SubResource("Sky_ggvqs")
ambient_light_source = 2
tonemap_mode = 2
glow_enabled = true

[sub_resource type="SphereMesh" id="SphereMesh_ggvqs"]
radius = 1.033
height = 1.795

[sub_resource type="Curve3D" id="Curve3D_ggvqs"]

[sub_resource type="Shader" id="Shader_cfn36"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx, shadows_disabled;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
	
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos.zyx);
	VERTEX.xyz += NORMAL.xyz * pow(albedo_tex.r,2.) * 2.;
	//VERTEX.y += (albedo_tex.r - 0.5) * -1.;
	VERTEX.x -= pow(smoothstep(0., 2.25, abs(VERTEX.y)),2) * 1.5;
}



void fragment() {
	//vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	//ALBEDO = albedo.rgb * albedo_tex.rgb;
	ALBEDO = albedo.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_cfn36"]
noise_type = 3
seed = 45
frequency = 0.0004
fractal_type = 0
fractal_octaves = 3
fractal_lacunarity = 1.5

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_i25bl"]
width = 1200
height = 1200
seamless = true
seamless_blend_skirt = 0.323
noise = SubResource("FastNoiseLite_cfn36")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_i25bl"]
render_priority = 0
shader = SubResource("Shader_cfn36")
shader_parameter/albedo = Color(0.847059, 0.533333, 0.266667, 1)
shader_parameter/texture_albedo = SubResource("NoiseTexture2D_i25bl")
shader_parameter/albedo_texture_size = Vector2i(1182, 1167)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="SphereMesh" id="SphereMesh_cfn36"]
radius = 0.845
height = 5.5
radial_segments = 18
rings = 12

[sub_resource type="QuadMesh" id="QuadMesh_i25bl"]
size = Vector2(15.09, 14.275)

[node name="World" type="Node3D"]
script = ExtResource("1_vdpkr")

[node name="envo" type="Node3D" parent="."]

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="envo"]
light_energy = 0.5
shadow_enabled = true

[node name="DirectionalLight3D4" type="DirectionalLight3D" parent="envo"]
transform = Transform3D(0.810042, -0.266207, 0.522462, 0, 0.891007, 0.453991, -0.586372, -0.367751, 0.721752, 0, 0, 0)
light_energy = 0.5
shadow_enabled = true

[node name="DirectionalLight3D2" type="DirectionalLight3D" parent="envo"]
transform = Transform3D(-0.5373, -0.260622, 0.802113, 0, 0.951057, 0.309017, -0.843391, 0.166035, -0.511002, 0, 0, 0)
light_energy = 0.198

[node name="DirectionalLight3D3" type="DirectionalLight3D" parent="envo"]
transform = Transform3D(0.596225, -0.12005, -0.793791, 0, -0.988756, 0.149535, -0.802817, -0.0891567, -0.589521, 0, 0, 0)
light_energy = 0.198

[node name="WorldEnvironment" type="WorldEnvironment" parent="envo"]
environment = SubResource("Environment_bk67d")

[node name="container" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -9.75646, 0, 0)
material_override = ExtResource("2_qhmyd")
mesh = SubResource("SphereMesh_ggvqs")

[node name="ExplodeTimer" type="Timer" parent="."]
wait_time = 0.1
autostart = true

[node name="wireframeContainer" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -9.25254, 0, 0.000711441)

[node name="CanvasLayer" parent="." instance=ExtResource("3_ggvqs")]

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 71.6585, 39.4197, 67.1918)

[node name="Path3D" type="Path3D" parent="."]
curve = SubResource("Curve3D_ggvqs")

[node name="PlaneMouseCapture" parent="." node_paths=PackedStringArray("camera") instance=ExtResource("4_bk67d")]
camera = NodePath("../Camera3D")

[node name="LineDrawing" parent="." node_paths=PackedStringArray("planeMouseScene") instance=ExtResource("5_cfn36")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -9.62833, 0, 0)
planeMouseScene = NodePath("../PlaneMouseCapture")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(0.915, 0, 0, 0, 1.055, 0, 0, 0, 1.895, 70.447, 25.393, -2.035)
material_override = SubResource("ShaderMaterial_i25bl")
cast_shadow = 0
mesh = SubResource("SphereMesh_cfn36")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.21282, 0, -5.64791)
mesh = SubResource("QuadMesh_i25bl")
